---
# Name of the tunnel you want to run
tunnel: home-cluster
credentials-file: /etc/cloudflared/creds/credentials.json
# Serves the metrics server under /metrics and the readiness server under /ready
metrics: 0.0.0.0:2000
no-autoupdate: true
originRequest:
  http2Origin: true

ingress:
  ### Proxy nginx to the k8s ingress (ingress-nginx) to hand off to Services
  # internet --> cloudflared tunnel --> local DNS --> ingress --> service
  ### NOTE: relies on split-brain DNS / local overrides
  - hostname: "${SECRET_OTHER_DOMAIN_1}"
    service: https://etherpad.${SECRET_DOMAIN}

  - hostname: "${SECRET_SHORT_DOMAIN}"
    service: http://ingress-nginx-controller.networking
  - hostname: "*.${SECRET_SHORT_DOMAIN}"
    service: http://ingress-nginx-controller.networking
    originRequest:
      originServerName: "ingress.${SECRET_EXT_INFRA_DOMAIN}"

  ### Proxy traffic directly to ingress-nginx controller service (ingress created)
  - hostname: "*.${SECRET_INTERNAL_DEPLOY_DOMAIN}"
    service: http://ingress-nginx-controller.networking
    originRequest:
      originServerName: "ingress.${SECRET_EXT_INFRA_DOMAIN}"
  - hostname: "*.${SECRET_EXT_INFRA_DOMAIN}"
    service: http://ingress-nginx-controller.networking
    originRequest:
      originServerName: "ingress.${SECRET_EXT_INFRA_DOMAIN}"
  - hostname: "*.${SECRET_APPSPLATFORM_PRD_DOMAIN}"
    service: http://ingress-nginx-controller.networking
    originRequest:
      originServerName: "ingress.${SECRET_EXT_INFRA_DOMAIN}"
  - hostname: "*.${SECRET_EXT_DOMAIN}"
    service: http://ingress-nginx-controller.networking
    originRequest:
      originServerName: "ingress.${SECRET_EXT_INFRA_DOMAIN}"
  - hostname: "*.${SECRET_B1_DOMAIN}"
    service: http://ingress-nginx-controller.networking

  ### Proxy traffic to the Kubernetes Services directly
  # - hostname: "echo.${SECRET_EXT_DOMAIN}"
  #   service: http://echo-server.default:8080

  # - hostname: "cr.${SECRET_EXT_DOMAIN}"
  #   service: https://harbor.development:443
  #   originRequest:
  #     noTLSVerify: true

  ### "Else" rule matches any traffic which didn't match a previous rule, and responds with HTTP 404.
  - service: http_status:404
